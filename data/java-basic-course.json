{
  "course": "Java Basic Course",
  "slug": "java-basic-course",
  "contents": [
    {
      "module": 1,
      "title": "Introduction to Java",
      "slug": "introduction-to-java",
      "submodules": [
        {
          "submodule": "A",
          "title": "History of Java",
          "slug": "history-of-java",
          "text": "\n\n<h1>History of Java</h1>\n\nJava is a programming language created in 1995 by James Gosling, Mike Sheridan and Patrick Naughton, and developed by Sun Microsystems. It is a general-purpose programming language, which means it can be used to create applications for many different purposes, such as mobile applications, web applications and enterprise applications.\n\nJava is an object-oriented language, which means it uses objects to create programs. Objects are used to store data and code, and can be used to create complex programs. The language is also platform independent, meaning it can be used on any system, regardless of the operating system or hardware.\n\nThe language was first released in 1996 as the Java 1.0. Since then, it has been continually updated and improved, with the current version being Java 14. It is estimated that there are over 9 million Java developers worldwide.\n\nJava is used to create a wide variety of applications, from small, web-based applications to large enterprise applications. It is also used to create mobile applications, games and embedded systems.\n\nJava is used in a wide variety of industries, including banking, finance, retail, healthcare and government. It is also used in scientific and research applications, such as artificial intelligence, machine learning and natural language processing.\n\nJava has become one of the most popular programming languages in the world, and is used in many different contexts. It is a powerful language that can be used to create powerful applications and complex systems.\n\n<code language=\"java\">public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}</code>"
        },
        {
          "submodule": "B",
          "title": "Basic Syntax",
          "slug": "basic-syntax",
          "text": "\n\n<h1>Basic Syntax</h1>\n\nJava is a powerful programming language that has a syntax similar to C/C++. In this module, we will discuss the basic syntax of the language and how to write a simple program in Java.\n\n<h2>Comments</h2>\n\nComments are used to explain the code and make it more readable. In Java, there are two types of comments: single-line and multi-line.\n\nSingle-line comments begin with two forward slashes (//). All text after the slashes is ignored by the compiler. For example:\n\n<code language=\"java\">// This is a single-line comment</code>\n\nMulti-line comments begin with a forward slash followed by an asterisk (/*) and end with an asterisk followed by a forward slash (*/). All text between the opening and closing tags is ignored by the compiler. For example:\n\n<code language=\"java\">/*\nThis is a multi-line comment\nIt can span multiple lines\n*/</code>\n\n<h2>Variables</h2>\n\nVariables are used to store data in a program. In Java, all variables must be declared before they can be used. The general syntax for declaring a variable is as follows:\n\n<code language=\"java\">dataType variableName;</code>\n\nWhere dataType is the type of data to be stored and variableName is the name of the variable. For example, to declare an integer variable called \"x\", we would use the following code:\n\n<code language=\"java\">int x;</code>\n\n<h2>Statements</h2>\n\nStatements are the basic building blocks of a Java program. A statement is a line of code that performs a specific action. For example, to print the text \"Hello World\" to the console, we would use the following statement:\n\n<code language=\"java\">System.out.println(\"Hello World\");</code>\n\n<h2>Classes</h2>\n\nA class is a template for an object. A class contains fields (variables) and methods (functions). A class must be declared before it can be used. The general syntax for declaring a class is as follows:\n\n<code language=\"java\">public class ClassName {\n    // fields and methods\n}</code>\n\nWhere ClassName is the name of the class. For example, to declare a class called \"MyClass\", we would use the following code:\n\n<code language=\"java\">public class MyClass {\n    // fields and methods\n}</code>\n\n<h2>Methods</h2>\n\nMethods are functions that are declared within a class. The general syntax for declaring a method is as follows:\n\n<code language=\"java\">public static void methodName() {\n    // code\n}</code>\n\nWhere methodName is the name of the method. For example, to declare a method called \"myMethod\", we would use the following code:\n\n<code language=\"java\">public static void myMethod() {\n    // code\n}</code>\n\n<h2>Conclusion</h2>\n\nIn this module, we discussed the basic syntax of the Java programming language. We learned about comments, variables, statements, classes, and methods. We also saw examples of how to write simple programs in Java."
        },
        {
          "submodule": "C",
          "title": "Data Types and Variables",
          "slug": "data-types-and-variables",
          "text": "\n\n# Data Types and Variables\n\nIn Java, variables are containers for storing data values. Each variable has a specific type, which defines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable. The types of variables in Java are divided into two main categories: primitive types and reference types.\n\n## Primitive Types\n\nPrimitive types are the most basic data types available within the Java language. They are predefined by the language and named by a keyword. The eight primitive data types are:\n\n* `boolean`: Stores values with two states: `true` or `false`\n* `byte`: Stores 8-bit (1-byte) whole numbers from -128 to 127\n* `short`: Stores 16-bit (2-byte) whole numbers from -32,768 to 32,767\n* `int`: Stores 32-bit (4-byte) whole numbers from -2,147,483,648 to 2,147,483,647\n* `long`: Stores 64-bit (8-byte) whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n* `float`: Stores 32-bit (4-byte) fractional numbers. Sufficient for storing 6 to 7 decimal digits\n* `double`: Stores 64-bit (8-byte) fractional numbers. Sufficient for storing 15 decimal digits\n* `char`: Stores single 16-bit (2-byte) Unicode characters, such as 'a', 'A', '$', or '\\u0041' (the Unicode representation of the uppercase letter 'A')\n\n## Reference Types\n\nReference types are more complex data types than primitive types. They are created by the programmer and not predefined by the language. Unlike primitive types, reference types can represent multiple values. Examples of reference types in Java include objects, classes, and arrays.\n\n## Declaring Variables\n\nJava variables must be declared before they can be used. To declare a variable, you must specify the type and assign it a unique name.\n\nThe general form of a variable declaration is:\n\n```java\ndataType variableName;\n```\n\nFor example, to declare a variable called `myName` of type `String`, you would write:\n\n```java\nString myName;\n```\n\nYou can also assign a value to the variable when you declare it:\n\n```java\nString myName = \"John Doe\";\n```\n\nOnce a variable is declared, you can use it in your code. For example:\n\n```java\nString myName = \"John Doe\";\nSystem.out.println(\"My name is \" + myName);\n```\n\nThis code will print out `My name is John Doe`."
        }
      ]
    },
    {
      "module": 2,
      "title": "Control Structures and Loops",
      "slug": "control-structures-and-loops",
      "submodules": [
        {
          "submodule": "A",
          "title": "Conditional Statements",
          "slug": "conditional-statements",
          "text": "\n\n# Conditional Statements\n\nConditional Statements are a way of making decisions in programming. They allow the program to execute code if certain conditions are met. In Java, the most common conditional statements are the if-else and switch statements.\n\n## If-Else Statement\n\nThe if-else statement is an important conditional statement used in Java. It is used to execute one set of code if a certain condition is true and another set of code if the condition is false. The syntax for the if-else statement is as follows:\n\n<code language=\"java\">if (condition) {\n  // code to execute if condition is true\n} else {\n  // code to execute if condition is false\n}</code>\n\nHere, the condition is a boolean expression that evaluates to either true or false. If the condition is true, the code inside the if block will be executed. If the condition is false, the code inside the else block will be executed.\n\nFor example, the following code will check if the number 10 is greater than 5 and print an appropriate message:\n\n<code language=\"java\">int number = 10;\nif (number > 5) {\n  System.out.println(\"Number is greater than 5\");\n} else {\n  System.out.println(\"Number is not greater than 5\");\n}</code>\n\n## Switch Statement\n\nThe switch statement is another conditional statement used in Java. It is used to execute one set of code depending on the value of a certain expression. The syntax for the switch statement is as follows:\n\n<code language=\"java\">switch (expression) {\n  case value1:\n    // code to execute for value1\n    break;\n  case value2:\n    // code to execute for value2\n    break;\n  ...\n  default:\n    // code to execute for all other cases\n    break;\n}</code>\n\nHere, the expression is an expression that evaluates to a value. The code inside the case blocks will be executed if the expression is equal to the value specified in the case block. The code inside the default block will be executed if the expression is not equal to any of the values specified in the case blocks.\n\nFor example, the following code will check the value of the variable \"fruit\" and print an appropriate message:\n\n<code language=\"java\">String fruit = \"apple\";\nswitch (fruit) {\n  case \"apple\":\n    System.out.println(\"Fruit is an apple\");\n    break;\n  case \"banana\":\n    System.out.println(\"Fruit is a banana\");\n    break;\n  default:\n    System.out.println(\"Fruit is neither an apple nor a banana\");\n    break;\n}</code>\n\nIn conclusion, conditional statements are an important part of programming in Java. They allow the program to make decisions and execute code depending on certain conditions. The two most commonly used conditional statements in Java are the if-else and switch statements."
        },
        {
          "submodule": "B",
          "title": "Loop Statements",
          "slug": "loop-statements",
          "text": "\n\n# Loop Statements\nIn programming, loop statements are used to repeat a block of code multiple times. It is one of the most important control structures used in programming. By using loop statements, we can execute a statement or group of statements multiple times.\n\nIn Java, there are three types of loop statements:\n\n## 1. For Loop\nThe for loop is used when you want to execute a statement or a group of statements multiple times. It is usually used when you know the exact number of times you want to execute the loop.\n\nSyntax:\n<code language=\"java\">\nfor (initialization; condition; increment/decrement)\n{\n   // code block to be executed\n}\n</code>\n\nExample:\n<code language=\"java\">\nfor (int i=1; i&lt;=10; i++)\n{\n   System.out.println(\"Iteration number: \"+i);\n}\n</code>\n\n## 2. While Loop\nThe while loop is used when you want to execute a statement or a group of statements multiple times as long as the condition is true.\n\nSyntax:\n<code language=\"java\">\nwhile (condition)\n{\n   // code block to be executed\n}\n</code>\n\nExample:\n<code language=\"java\">\nint i = 1;\nwhile (i &lt;= 10)\n{\n   System.out.println(\"Iteration number: \"+i);\n   i++;\n}\n</code>\n\n## 3. Do-While Loop\nThe do-while loop is similar to the while loop, except that the condition is checked at the end of the loop.\n\nSyntax:\n<code language=\"java\">\ndo\n{\n   // code block to be executed\n}\nwhile (condition);\n</code>\n\nExample:\n<code language=\"java\">\nint i = 1;\ndo\n{\n   System.out.println(\"Iteration number: \"+i);\n   i++;\n}\nwhile (i &lt;= 10);\n</code>"
        },
        {
          "submodule": "C",
          "title": "Arrays",
          "slug": "arrays",
          "text": "\n\n# Arrays\n\nAn array is a data structure used to store a collection of values. In Java, arrays are objects, which means they are a reference type. This means that when we create an array, we are actually creating a reference to the array object in memory.\n\nTo create an array, we use the new keyword and specify the type of the elements contained in the array. We also specify the size of the array. For example,\n\n<code language=\"java\">int[] numbers = new int[5];</code>\n\nThis creates an array of type int (integer) with 5 elements. We can also create arrays with literals, like this:\n\n<code language=\"java\">int[] numbers = {1,2,3,4,5};</code>\n\nThe elements in an array can be accessed using their index. In Java, array indices start from 0. For example, to access the second element in the array, we would use the index 1:\n\n<code language=\"java\">System.out.println(numbers[1]); // prints 2</code>\n\nTo loop through all the elements in an array, we can use a for loop. For example,\n\n<code language=\"java\">for (int i=0; i<numbers.length; i++) {\n System.out.println(numbers[i]);\n}</code>\n\nThis will print all the elements of the array.\n\nArrays are useful when we need to store a collection of values in a single variable. They are also useful for performing operations on all the elements in the array, such as sorting or searching."
        }
      ]
    },
    {
      "module": 3,
      "title": "Object Oriented Programming",
      "slug": "object-oriented-programming",
      "submodules": [
        {
          "submodule": "A",
          "title": "Classes and Objects",
          "slug": "classes-and-objects",
          "text": "\n\n# Classes and Objects\n\nIn object-oriented programming (OOP), classes and objects have a very important role. A class can be seen as a blueprint or a template for creating objects. An object is an instance of a class.\n\nClasses are used to create objects. They contain attributes (data) and methods (functions). Classes can be used to define the properties and behaviors of an object.\n\nObjects are instances of a class. They contain attributes and methods of the class. Objects are used to store data and manipulate it.\n\nFor example, a class called `Car` can be used to create objects. The `Car` class can have attributes such as the make, model, color, and year. It can also have methods such as `start()`, `stop()`, and `accelerate()`.\n\nHere is an example of a class in Java:\n\n<code language=\"java\">\npublic class Car {\n  // Attributes\n  private String make;\n  private String model;\n  private String color;\n  private int year;\n  \n  // Methods\n  public void start() {\n    // code to start the car\n  }\n  \n  public void stop() {\n    // code to stop the car\n  }\n  \n  public void accelerate() {\n    // code to accelerate the car\n  }\n}\n</code>\n\nOnce a class has been created, objects can be created from the class. For example, you can create an object from the `Car` class like this:\n\n<code language=\"java\">\nCar myCar = new Car();\n</code>\n\nNow `myCar` is an object of the `Car` class. You can access the attributes and methods of the class using the object. For example:\n\n<code language=\"java\">\nmyCar.make = \"Honda\";\nmyCar.model = \"Accord\";\nmyCar.color = \"Red\";\nmyCar.year = 2020;\n\nmyCar.start();\nmyCar.accelerate();\nmyCar.stop();\n</code>\n\nIn this example, we created an object from the `Car` class and set the attributes of the object. We also called the methods of the object.\n\nClasses and objects are essential concepts in object-oriented programming. Classes are used to define the properties and behaviors of an object. Objects are instances of a class and are used to store data and manipulate it."
        },
        {
          "submodule": "B",
          "title": "Inheritance and Polymorphism",
          "slug": "inheritance-and-polymorphism",
          "text": "\n\n<h1>Inheritance and Polymorphism</h1>\n\nInheritance and polymorphism are two concepts of Object Oriented Programming (OOP) that are closely related. Inheritance is the ability to create a new class from an existing class and to inherit the properties and methods of the parent class. Polymorphism is the ability to override and redefine the methods of the parent class in the child class.\n\nInheritance is an important concept in OOP because it allows us to create new classes from existing ones and to reuse code. This makes it easier to maintain and debug code, as well as creating new classes with minimal effort.\n\nIn Java, inheritance is implemented using the <code language=\"java\">extends</code> keyword. For example, if we have a class <code language=\"java\">Animal</code>, we can create a subclass <code language=\"java\">Dog</code> that inherits from the <code language=\"java\">Animal</code> class:\n\n<code language=\"java\">\npublic class Animal {\n    // properties and methods\n}\n\npublic class Dog extends Animal {\n    // properties and methods\n}\n</code>\n\nPolymorphism is the ability to redefine methods from the parent class in the child class. This allows us to create more specific versions of a method, while still keeping the original method intact. For example, if we have a <code language=\"java\">move()</code> method in the <code language=\"java\">Animal</code> class, we can override it in the <code language=\"java\">Dog</code> class:\n\n<code language=\"java\">\npublic class Animal {\n    public void move() {\n        // code for general movement\n    }\n}\n\npublic class Dog extends Animal {\n    @Override\n    public void move() {\n        // code for specific movement\n    }\n}\n</code>\n\nInheritance and polymorphism are powerful concepts in OOP that allow us to create new classes from existing ones, and to override and redefine methods from parent classes. This makes it easier to maintain and debug code, as well as creating new classes with minimal effort."
        },
        {
          "submodule": "C",
          "title": "Exception Handling",
          "slug": "exception-handling",
          "text": "\n\n<h1>Exception Handling</h1>\n\nException handling is an important concept in Object Oriented Programming (OOP) with the Java language. It allows code to handle errors in a predictable manner, and to resume normal execution when an error occurs.\n\nAn exception is an error that has occurred during the execution of a program. When an exception occurs, the program stops and an exception object is created that contains information about the error. The program then looks for code to handle the exception. This is known as exception handling.\n\nWhen writing code with Java, it is important to use exception handling to manage errors. To do this, the program must have a try block, which contains the code that could potentially cause an error. If an error occurs, the program will then look for a catch block, which contains the code to handle the error. Finally, the program will execute a finally block, which contains any code that must be executed no matter what.\n\nExample:\n\n<code language=\"java\">\ntry {\n    // code that could potentially cause an error\n} catch (Exception e) {\n    // code to handle the error\n} finally {\n    // code to be executed no matter what\n}\n</code>\n\nIt is also possible to have multiple catch blocks to handle different types of exceptions. This allows for more specific handling of different errors.\n\nExample:\n\n<code language=\"java\">\ntry {\n    // code that could potentially cause an error\n} catch (IOException e) {\n    // code to handle IOExceptions\n} catch (NumberFormatException e) {\n    // code to handle NumberFormatExceptions\n} finally {\n    // code to be executed no matter what\n}\n</code>\n\nException handling is an important concept in Java programming, and it is important to understand how to use it to manage errors in a predictable manner. By using exception handling, a program can continue to run even when an error occurs, allowing it to handle the error and resume normal execution."
        }
      ]
    },
    {
      "module": 4,
      "title": "Advanced Java",
      "slug": "advanced-java",
      "submodules": [
        {
          "submodule": "A",
          "title": "Collections Framework",
          "slug": "collections-framework",
          "text": "\n\n# Collections Framework\n\nIn the Java language, the Collections Framework is an architecture for storing and manipulating collections of objects. It provides a set of interfaces and classes that allow the programmer to easily manage collections of objects.\n\nThe Collections Framework is a set of classes and interfaces that provide a high-level view of the data structures and algorithms that enable efficient manipulation of collections. The classes and interfaces of the Collections Framework are organized into four packages: java.util, java.util.concurrent, java.util.concurrent.atomic, and java.util.concurrent.locks.\n\nThe Collections Framework provides a set of standard APIs for managing collections of objects. It provides a consistent, easy-to-use API for manipulating collections of objects. The Collections Framework also provides efficient implementations of common data structures, such as lists, sets, and maps.\n\nThe main interfaces of the Collections Framework are Collection, List, Set, and Map. A Collection is a group of objects, and the Collection interface provides methods for manipulating the objects in the collection. The List interface provides methods for manipulating a list of objects. The Set interface provides methods for manipulating a set of objects. The Map interface provides methods for manipulating a map of objects.\n\nThe Collections Framework also provides classes that implement the interfaces. These classes provide efficient implementations of the interfaces, and are often used when manipulating collections of objects. Examples of these classes include ArrayList, LinkedList, HashSet, and TreeMap.\n\nThe following code example shows how to create and manipulate a collection of strings using the Collections Framework:\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"Hello\");\nlist.add(\"World\");\n\nSystem.out.println(list); // prints [Hello, World]\n\nlist.remove(\"World\");\nSystem.out.println(list); // prints [Hello]\n```\n\nThe Collections Framework also provides utility classes for manipulating collections. These classes provide static methods for performing common operations on collections, such as sorting, searching, and filtering. Examples of these classes include Collections and Arrays.\n\nThe Collections Framework is a powerful and versatile set of APIs for managing collections of objects. It provides a consistent, easy-to-use API for manipulating collections of objects, and efficient implementations of common data structures. It also provides utility classes for manipulating collections. By using the Collections Framework, programmers can easily and efficiently manipulate collections of objects."
        },
        {
          "submodule": "B",
          "title": "Generics",
          "slug": "generics",
          "text": "\n\n<h1>Generics</h1>\n\nGenerics are a powerful feature of the Java programming language. They allow the type of a collection to be specified, so that the same code can be used with different types. Generics also provide compile-time type safety, so that type mismatches can be caught at compile time instead of run time.\n\nGenerics are declared using angle brackets (< and >). The type parameter goes between the angle brackets. For example, to declare a generic List, we write:\n\n<code language=\"java\">List&lt;T&gt; list = new ArrayList&lt;T&gt;();</code>\n\nHere, T is the type parameter. We can then use this list with any type. For example, we can use it with Strings:\n\n<code language=\"java\">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</code>\n\nWe can also use it with Integers:\n\n<code language=\"java\">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code>\n\nGenerics also allow us to create generic methods. For example, the following method takes a list of any type and prints out all the elements in the list:\n\n<code language=\"java\">public static &lt;T&gt; void printList(List&lt;T&gt; list) {\n    for (T element : list) {\n        System.out.println(element);\n    }\n}</code>\n\nWe can then use this method with any type. For example, we can use it with Strings:\n\n<code language=\"java\">List&lt;String&gt; list = new ArrayList&lt;String&gt;();\nlist.add(\"Hello\");\nlist.add(\"World\");\n\nprintList(list);</code>\n\nWe can also use it with Integers:\n\n<code language=\"java\">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\nlist.add(1);\nlist.add(2);\n\nprintList(list);</code>\n\nGenerics are an essential part of the Java language and are an important tool for writing robust, type-safe code."
        },
        {
          "submodule": "C",
          "title": "Threads",
          "slug": "threads",
          "text": "\n\n<h1>Threads</h1>\n\nThreads are a powerful tool for Java developers to execute multiple tasks simultaneously, allowing a program to do more than one thing at a time. This is a fundamental concept in Java, and it is important to understand how threads work and how to use them correctly.\n\nThreads are created by extending the Thread class or implementing the Runnable interface. When a thread is created, it can be started by calling the start() method. The run() method is then called, which is where the code that will be executed by the thread should be placed.\n\n<code language=\"java\">\npublic class MyThread extends Thread {\n    public void run() {\n        System.out.println(\"My thread is running\");\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        MyThread t = new MyThread();\n        t.start();\n    }\n}\n</code>\n\nIn the code above, the MyThread class is a thread that prints out the message \"My thread is running\" when it is run. The Test class creates an instance of the MyThread class and starts it.\n\nThreads can also be synchronized, which means that two or more threads will not execute their code at the same time. This is done by using the synchronized keyword and the wait(), notify(), and notifyAll() methods.\n\n<code language=\"java\">\npublic class MyThread extends Thread {\n    public void run() {\n        synchronized (this) {\n            System.out.println(\"My thread is running\");\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n \npublic class Test {\n    public static void main(String[] args) {\n        MyThread t = new MyThread();\n        t.start();\n        synchronized (t) {\n            t.notify();\n        }\n    }\n}\n</code>\n\nIn the code above, the MyThread class is a thread that prints out the message \"My thread is running\" when it is run, and then waits until it is notified. The Test class creates an instance of the MyThread class, starts it, and then notifies it.\n\nThreads are a powerful tool for Java developers and are an important concept to understand. Knowing how to create and use threads correctly can greatly improve the performance of your applications."
        }
      ]
    }
  ]
}